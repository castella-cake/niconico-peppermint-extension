.player-container {
    padding: 8px;
    background: var(--bgcolor2);
    border-radius: var(--radius);
    display: flex;
    flex-direction: column;
    position: relative;
    border: var(--border);
    box-shadow: var(--box-shadow);
    &[is-pipvideo="false"] .player-commentvideo-pip {
        display: none;
    }
    &[is-pipvideo="true"] .player-video-container-inner canvas, &[is-pipvideo="true"] .player-video-container-inner video:not(.player-commentvideo-pip) {
        display: none;
    }
}
.player-video-container {
    flex-grow: 1;
    width: 100%;
    //max-height: 100%;
    //height: 100%;
    overflow: hidden;
}
.player-video-container-inner {
    aspect-ratio: 16 / 9;
    width: 100%;
    position: relative;
    height: 100%;
    overflow: hidden;
    margin: 0 auto;
    background: #000;
    video {
        display: block;
        width: 100%;
        height: 100%;
        /* display: none; */
        position: absolute;
        filter: contrast(1); // Chromiumでなぜかスケーリング品質がよくなる
    }
    canvas {
        position: absolute;
        width: 100%;
        height: auto;
        top: 0;
        left: 0;
        pointer-events: none;
        aspect-ratio: 16 / 9;
        display: block;
    }
}

.player-bottom-container {
    opacity: 1;
    transition: opacity 0.3s ease;
    > div {
        margin-left: auto;
        margin-right: auto;
    }
}

[is-integrated-controller="true"] .playercontroller-container {
    position: absolute;
    left: 8px;
    right: 8px;
    background: linear-gradient(0deg, #000a 80%, #0000);
    bottom: calc(0.9em + 32px + 5px);
    padding: 4px;
    z-index: 60;
    padding-top: 16px;
    opacity: 1;
    transition: opacity 0.3s ease;
    --bgcolor1: #000a;
    --bgcolor2: #1a1a1aaf;
    --bgcolor3: #252525af;
    --bgcolor4: #3a3a3aaf;
    --accent1: #1e1e1eaf;
    --accent2: #2a2a2aaf;
    --hover1: #404040af;
    --hover2: #5a5a5aaf;
    --textcolor1: #fff;
    --textcolor2: #ddd;
    --textcolor3: #aaa;
}

// 非フルスクリーンもしくは非ダイナミックコントローラー時に、動画要素の上でカーソルが動いていない場合は半透明。
// 非ホバー時は適用しない。また、後ろに書いたopacityによってオーバーライドする場合もある
[is-cursor-stopped="true"]:hover .player-bottom-container:not(:hover) {
    opacity: 0.5; 
}

[is-integrated-controller="true"][is-cursor-stopped="true"] .playercontroller-container:not(:hover) {
    opacity: 0 !important; 
}

.fullscreen [is-bigview="false"] {
    .player-container {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        top: 0;
        padding: 0;
        align-items: center;
        overflow: hidden;
        background: var(--bgcolor1);
        z-index: 10;
        border: none;
        border-radius: 0;
    }
    .playercontroller-container {
        width: 70vw;
        margin: 8px 32px;
    }
    [is-dynamic-controller="true"] .player-bottom-container {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 8px;
        background: linear-gradient(0deg, #000a 80%, #0000);
        padding-top: 32px;
        z-index: 30;
        opacity: 0 !important; // フルスクリーンでダイナミック表示時にカーソルが動いていない
    }

    [is-dynamic-controller="true"] .player-bottom-container > div {
        margin-left: auto;
        margin-right: auto;
    }

    // フルスクリーンでダイナミック表示時にカーソルが動いている場合、もしくはホバーされている場合に不透明
    [is-cursor-stopped="false"][is-dynamic-controller="true"] .player-bottom-container, [is-dynamic-controller="true"] .player-bottom-container:hover {
        opacity: 1 !important;
    }
}

[is-cursor-stopped="true"] {
    .player-video-container {
        cursor: none;
    }
}

.player-bottom-container {
    cursor: inherit;
}


[watch-type="shinjuku"] .player-container {
    padding: 0px;
}

.statsoverlay {
    position: relative;
    left: 0;
    top: 0;
    margin: 8px;
    padding: 8px;
    background: #000a;
    color: #fff;    
    width: fit-content;
    font-family: monospace;
    font-size: 16px;
}

.player-transition {
    &-vefx-enter, &-vefx-exit-active {
        --translateX: -100%;
    }
    &-settings-enter, &-settings-exit-active {
        --translateX: 100%;
    }
    &-vefx, &-settings {
        &-enter-active {
            transition: transform 0.3s ease;
            * {
                transition: transform 0.35s ease;
            }
        }
        &-exit-active {
            transition: transform 0.35s ease;
            * {
                transition: transform 0.3s ease;
            }
        }
        &-enter, &-exit-active {
            transform: translateX(var(--translateX))
            * {
                transform: translateX(var(--translateX))
            }
        }
        &-enter-done, &-enter-active {
            transform: translateX(0%)
            * {
                transform: translateX(0%)
            }
        }
    }
}